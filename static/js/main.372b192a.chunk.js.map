{"version":3,"sources":["components/Form.jsx","components/Todo.jsx","components/List.jsx","App.js","reportWebVitals.js","index.js"],"names":["Form","inputText","setInputText","filteredTodos","tasksArray","setTasksArray","setStatus","className","onChange","e","target","value","type","name","id","onClick","preventDefault","alert","text","completed","Math","random","class","console","log","Todo","todo","task","map","item","filter","el","List","App","useState","status","setFilteredTodos","useEffect","localStorage","getItem","setItem","JSON","stringify","todoLocal","parse","getLocalTodos","filterHandler","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.372b192a.chunk.js","sourcesContent":["import React from 'react'\nimport '../App.scss'\n\nfunction Form({inputText, filteredTodos, setInputText, tasksArray, setTasksArray, setStatus}) {\n    //A function\n    const inputTextHandler = e => {\n        //This is passing down the setFunction from the app component\n        //and therefore inputing the target value to the passed down function\n        setInputText(e.target.value)\n    }\n    const submitHandler = e => {\n        e.preventDefault();\n        inputText === \"\" ? alert(\"Give an Input\") : setTasksArray([...tasksArray,{text:inputText, completed:false, id: Math.random() * 1000 }])\n\n        setInputText(\"\");\n    }\n    const statusHandler = (e) => {\n        console.log(e.target.value)\n        setStatus(e.target.value)\n    }\n    return (\n        <div>\n            <form >\n                <div className=\"form-div\">\n                    <input onChange={inputTextHandler} type=\"text\" name=\"\" id=\"\" className=\"todo-input\" value={inputText}/>\n                    <button onClick={submitHandler} type=\"submit\" className=\"todo-btn\"><i class=\"fas fa-plus\"></i></button>\n                    <div className=\"select\">\n                    <select name=\"todos\" onChange={statusHandler}className=\"filter-todo\">\n                        <option value=\"all\">All</option>\n                        <option value=\"completed\">Completed</option>\n                        <option value=\"uncompleted\">Uncompleted</option>\n                    </select>\n                </div>\n                </div>\n                \n            </form>\n        </div>\n    )\n}\n\nexport default Form\n","import React from 'react'\nimport '../App.scss'\n\nfunction Todo({todo, task, completed, tasksArray, setTasksArray}) {\n    const completeHandler = () =>{\n        setTasksArray(tasksArray.map(item => {\n            if (item.id === task.id) {\n                return{\n                    ...item, completed: !item.completed\n                }\n            }\n            return item;\n        }))\n    }\n    const deleteHandler = () =>{\n        setTasksArray(tasksArray.filter(el => el.id !== task.id))\n    }\n    return (\n        <div className={`todo ${completed ? \"complete\" : \"\"}`}>\n            <li className=\"todo-item\">{todo}</li>\n            <div className=\"buttonDiv\">\n                <button className=\"completed\" onClick={completeHandler}><i className=\"fas fa-check\"></i></button>\n                <button className=\"delete\" onClick={deleteHandler}><i className=\"far fa-trash-alt\"></i></button>\n            </div>\n            \n        </div>\n    )\n}\n\nexport default Todo\n","import React from 'react'\nimport '../App.scss'\nimport Todo from './Todo'\nfunction List({inputText,filteredTodos, tasksArray,setTasksArray}) {\n\n    return (\n        <div className=\"todo-container\">\n            <ul className=\"todo-list\">\n                {filteredTodos.map(task =><Todo key={task.id} task={task} tasksArray={tasksArray} todo={task.text} completed={task.completed} setTasksArray={setTasksArray}/>)}\n            </ul>\n        </div>\n    )\n}\n\nexport default List\n","import React, { useEffect, useState } from 'react'\nimport './App.scss';\n//Importing Components\nimport Form from './components/Form';\nimport List from './components/List';\n\nfunction App() {\n  \n  //State for the Input\n  const [inputText,setInputText] = useState(\"\");\n  //This is a state to store the input as an Array\n  const [tasksArray, setTasksArray] = useState([])\n  const [status, setStatus] = useState('all')\n  const [filteredTodos, setFilteredTodos] = useState([])\n\n  // the passed down function which is setInputText has been set to the value from\n  //the child component and has updated the state of the inputText to the data/info gotten from the\n  //child component which is the e.target.value\n  const clearAll = () => setTasksArray([])\n  const filterHandler = () => {\n    switch (status) {\n      case \"completed\":\n        setFilteredTodos(tasksArray.filter(task=>task.completed === true))\n        break;\n        case \"uncompleted\":\n          setFilteredTodos(tasksArray.filter(task=>task.completed === false))\n          break;\n      default:\n        setFilteredTodos(tasksArray)\n        break;\n    }\n  }\n  const saveLocalTodos = () => {\n      localStorage.setItem('todos', JSON.stringify(tasksArray))\n    \n  }\n  const getLocalTodos = () => {\n    if (localStorage.getItem('todos') === null) {\n      localStorage.setItem('todos', JSON.stringify([]) )\n    }else{\n      let todoLocal = JSON.parse(localStorage.getItem('todos', JSON.stringify(tasksArray)))\n      setTasksArray(todoLocal)\n    }\n  }\n  useEffect(()=>{\n    getLocalTodos()\n  },[])\n  //use effect\n  useEffect(()=>{\n    filterHandler()\n    saveLocalTodos()\n  },[tasksArray, status])\n  //saving to local storage\n  \n  return (\n    <div className=\"App\">\n        <h1>Zuka's Todo List</h1>\n        <Form inputText={inputText} \n              tasksArray={tasksArray} \n              setTasksArray={setTasksArray} \n              setInputText={setInputText} \n              setStatus={setStatus}/>\n\n        <List inputText={inputText} \n              tasksArray={tasksArray} \n              setTasksArray={setTasksArray}\n              status={status}\n              filteredTodos={filteredTodos}/> \n        <button onClick={clearAll} className=\"clear-all\">Clear All</button>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}